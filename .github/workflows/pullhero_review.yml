# GNU GENERAL PUBLIC LICENSE
# Version 3, 29 June 2007
#
# Copyright (C) 2025 authors
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.

---
name: PullHero Assisted Code Review workflow

on:
  issue_comment:
    types: [created]

jobs:
  pullhero-review:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
      actions: read

    if: |
      github.event.issue.pull_request != null &&
      startsWith(github.event.comment.body, '/review')

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          ref: ${{ github.event.issue.pull_request.head.ref }}
          repository: ${{ github.repository }}

      - name: Debug Comment Data
        run: |
          echo "Comment Details:"
          echo " - Comment Body: '${{ github.event.comment.body }}'"
          echo " - Comment Author: '${{ github.event.comment.user.login }}'"
          echo " - PR Number: ${{ github.event.issue.number }}"

      - name: Verify User Authorization
        id: check_user
        run: |
          COMMENT_USER="${{ github.event.comment.user.login }}"
          REPO="${{ github.repository }}"
          ORG="${REPO%%/*}"  # Extract organization/user name

          echo "Checking permissions for user: $COMMENT_USER in repo: $REPO"

          # Check if user is a repository collaborator
          COLLABORATOR_PERMS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/$REPO/collaborators/$COMMENT_USER/permission")

          PERMISSION=$(echo "$COLLABORATOR_PERMS" | jq -r '.permission')

          if [[ "$PERMISSION" == "admin" || "$PERMISSION" == "write" ]]; then
            echo "User has write/admin access as a collaborator."
            echo "AUTHORIZED=true" >> $GITHUB_ENV
            exit 0
          fi

          # Check if user is an organization member
          ORG_PERMS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/orgs/$ORG/memberships/$COMMENT_USER")

          ORG_STATE=$(echo "$ORG_PERMS" | jq -r '.state')

          if [[ "$ORG_STATE" == "active" ]]; then
            echo "User is an active organization member."
            echo "AUTHORIZED=true" >> $GITHUB_ENV
            exit 0
          fi

          echo "User is NOT authorized to trigger the review."
          echo "AUTHORIZED=false" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Exit if Unauthorized
        if: env.AUTHORIZED != 'true'
        run: |
          echo "ERROR: User is not authorized to trigger the review."
          exit 1

      - name: Debug Secret Variables
        run: |
          echo "Verifying Secret Variables..."

          if [[ -z "${{ secrets.OPENAI_API_KEY }}" ]]; then
            echo "ERROR: OPENAI_API_KEY is missing!"
          else
            echo "OPENAI_API_KEY is set. (Length: ${#OPENAI_API_KEY})"
          fi

          if [[ -z "${{ secrets.GITHUB_TOKEN }}" ]]; then
            echo "ERROR: GITHUB_TOKEN is missing!"
          else
            echo "GITHUB_TOKEN is set. (Length: ${#GITHUB_TOKEN})"
          fi
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run PullHero Review (Open AI)
        #uses: pullhero/review@v1
        uses: pullhero/review@main
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          api-key: "${{ secrets.OPENAI_API_KEY }}"
          api-host: "api.openai.com"
          api-model: "gpt-4o-mini"
          vote-action: 'comment'

      - name: Run PullHero Review (Mistral)
        #uses: pullhero/review@v1
        uses: pullhero/review@main
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          api-key: "${{ secrets.MISTRAL_API_KEY }}"
          api-host: "api.mistral.ai"
          api-model: "mistral-large-latest"
          vote-action: 'comment'

      - name: Run PullHero Review (DeepSeek)
        #uses: pullhero/review@v1
        uses: pullhero/review@main
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          api-key: "${{ secrets.DEEPSEEK_API_KEY }}"
          api-host: "api.deepseek.com"
          api-model: "deepseek-chat"
          vote-action: 'comment'
